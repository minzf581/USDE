// This is your Prisma schema file for SQLite (Local Development)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/app.db"
}

// Enterprise models
model Enterprise {
  id          String   @id @default(cuid())
  name        String
  adminId     String   @unique // Enterprise admin ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  admin       Company  @relation("EnterpriseAdmin", fields: [adminId], references: [id])
  users       Company[] @relation("EnterpriseUsers")
}

// Role-based access control models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // ADMIN, SUPERVISOR, OPERATOR, OBSERVER
  description String?
  permissions Permission[]
  users       UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // view_balance, initiate_payment, approve_payment, view_reports, etc.
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  companyId String?  // For enterprise users, link to parent company
  assignedAt DateTime @default(now())
  
  // Relations
  user      Company  @relation("UserRoles", fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  company   Company? @relation("CompanyUserRoles", fields: [companyId], references: [id])
}

// Treasury control models
model TreasurySettings {
  id                    String   @id @default(cuid())
  companyId             String   @unique
  monthlyBudget         Float    @default(0)
  quarterlyBudget       Float    @default(0)
  approvalThreshold     Float    @default(1000) // Amount requiring approval
  autoApprovalEnabled   Boolean  @default(false)
  riskFlagThreshold     Float    @default(5000) // Amount triggering risk flag
  approvalWorkflow      String   @default("single") // single, dual, committee
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company  @relation(fields: [companyId], references: [id])
}

model ApprovalWorkflow {
  id          String   @id @default(cuid())
  companyId   String
  type        String   // payment, withdrawal, kyc
  requestId   String   // ID of the payment/withdrawal/kyc request
  status      String   @default("pending") // pending, approved, rejected
  currentStep Int      @default(1)
  totalSteps  Int      @default(1)
  approvers   String   // JSON array of approver IDs
  approvals   Approval[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
}

model Approval {
  id          String   @id @default(cuid())
  workflowId  String
  approverId  String
  status      String   @default("pending") // pending, approved, rejected
  notes       String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  workflow   ApprovalWorkflow @relation(fields: [workflowId], references: [id])
  approver   Company          @relation(fields: [approverId], references: [id])
}

// Company and User models
model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  type        String   @default("company") // company, enterprise, subsidiary
  role        String   @default("enterprise_user") // admin, enterprise_admin, enterprise_user, supervisor, operator, observer
  status      String   @default("active")
  kycStatus   String   @default("pending")
  balance     Float    @default(0)
  usdeBalance Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Enterprise relations
  enterpriseAdmin Enterprise[] @relation("EnterpriseAdmin")
  enterpriseUsers Enterprise[] @relation("EnterpriseUsers")
  enterpriseUserRoles UserRole[] @relation("CompanyUserRoles")
  
  // Treasury relations
  treasurySettings TreasurySettings?
  approvalWorkflows ApprovalWorkflow[]
  
  // User roles
  userRoles UserRole[] @relation("UserRoles")
  
  // Other relations (payment, stake, etc.)
  payments Payment[]
  stakes Stake[]
  deposits Deposit[]
  withdrawals Withdrawal[]
  kycRequests KYC[]
  bankAccounts BankAccount[]
  usdeTransactions USDETransaction[]
  
  // Approval relations
  approvals Approval[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment models
model Payment {
  id          String   @id @default(cuid())
  company_id  String
  amount      Float
  currency    String   @default("USD")
  status      String   @default("pending")
  type        String   // payment, withdrawal
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// Stake models
model Stake {
  id          String   @id @default(cuid())
  company_id  String
  amount      Float
  apy         Float    @default(0.05)
  status      String   @default("active")
  start_date  DateTime @default(now())
  end_date    DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// Deposit models
model Deposit {
  id          String   @id @default(cuid())
  company_id  String
  amount      Float
  currency    String   @default("USD")
  status      String   @default("pending")
  stripe_payment_intent_id String?
  usde_minted Float    @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// Withdrawal models
model Withdrawal {
  id          String   @id @default(cuid())
  company_id  String
  amount      Float
  currency    String   @default("USD")
  status      String   @default("pending")
  bank_account_id String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// KYC models
model KYC {
  id          String   @id @default(cuid())
  company_id  String
  status      String   @default("pending")
  documents   String?  // JSON array of document URLs
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// Bank Account models
model BankAccount {
  id          String   @id @default(cuid())
  company_id  String
  account_number String
  routing_number String
  bank_name   String
  account_type String @default("checking")
  status      String  @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}

// USDE Transaction models
model USDETransaction {
  id              String   @id @default(cuid())
  company_id      String
  type            String   // mint, burn, transfer, etc.
  amount          Float
  currency        String   @default("USD")
  status          String   @default("completed")
  reference_id    String?
  reference_type  String?
  balanceBefore   Float?
  balanceAfter    Float?
  description     String?
  blockchainTxHash String?
  metadata        String?
  timestamp       DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [company_id], references: [id])
}
