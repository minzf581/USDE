// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enterprise models
model Enterprise {
  id          String   @id @default(cuid())
  name        String
  adminId     String   @unique // Enterprise admin ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  admin       Company  @relation("EnterpriseAdmin", fields: [adminId], references: [id])
  users       Company[] @relation("EnterpriseUsers")
}

// Role-based access control models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // admin, finance_manager, finance_operator, observer
  description String?
  permissions Permission[]
  users       UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // view_balance, initiate_payment, approve_payment, view_reports, etc.
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  companyId String?  // For enterprise users, link to parent company
  assignedAt DateTime @default(now())
  
  // Relations
  user      Company  @relation("UserRoles", fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  company   Company? @relation("CompanyUserRoles", fields: [companyId], references: [id])
}

// Treasury control models
model TreasurySettings {
  id                    String   @id @default(cuid())
  companyId             String   @unique
  monthlyBudget         Float    @default(0)
  quarterlyBudget       Float    @default(0)
  approvalThreshold     Float    @default(1000) // Amount requiring approval
  autoApprovalEnabled   Boolean  @default(false)
  riskFlagThreshold     Float    @default(5000) // Amount triggering risk flag
  approvalWorkflow      String   @default("single") // single, dual, committee
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company  @relation(fields: [companyId], references: [id])
}

model ApprovalWorkflow {
  id          String   @id @default(cuid())
  companyId   String
  type        String   // payment, withdrawal, kyc
  requestId   String   // ID of the payment/withdrawal/kyc request
  status      String   @default("pending") // pending, approved, rejected
  currentStep Int      @default(1)
  totalSteps  Int      @default(1)
  approvers   String   // JSON array of approver IDs
  approvals   Approval[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
}

model Approval {
  id          String   @id @default(cuid())
  workflowId  String
  approverId  String
  status      String   @default("pending") // pending, approved, rejected
  notes       String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  
  // Relations
  workflow    ApprovalWorkflow @relation(fields: [workflowId], references: [id])
  approver    Company          @relation(fields: [approverId], references: [id])
}

model Company {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password      String
  role          String   @default("enterprise_admin") // admin, enterprise_admin, enterprise_finance_manager, enterprise_finance_operator
  kycStatus     String   @default("pending") // pending, approved, rejected
  kycDocuments  String?  // JSON string of document URLs
  ucBalance     Float    @default(0)
  usdeBalance   Float    @default(0) // USDE stablecoin balance
  totalEarnings Float    @default(0)
  isActive      Boolean  @default(true)
  
  // Enterprise fields
  isEnterpriseAdmin Boolean @default(true) // New users are enterprise admins by default
  isEnterpriseUser  Boolean @default(false)
  enterpriseId      String? // Enterprise ID, null for enterprise admin
  enterpriseRole    String? // enterprise_admin, enterprise_finance_manager, enterprise_finance_operator
  
  // Enterprise information
  companyName       String? // Company name for enterprise admin
  enterpriseCompanyType String? // Company type for enterprise admin
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // KYC Company Information
  companyNameEn     String?  // Company name in English
  companyRegNumber  String?  // UEN/Registration number
  countryOfReg      String?  // Country of registration
  regAddress        String?  // Registered address
  incorporationDate DateTime? // Date of incorporation
  companyType       String?  // Type of company (Private Limited, etc.)
  
  // KYC Compliance
  isPEP             Boolean  @default(false) // Politically Exposed Person
  isSanctioned      Boolean  @default(false) // Sanctioned country
  complianceAgreed  Boolean  @default(false) // Terms and conditions agreed
  
  // Relations
  paymentsFrom  Payment[] @relation("PaymentFrom")
  paymentsTo    Payment[] @relation("PaymentTo")
  lockedBalances LockedBalance[]
  stakes        Stake[]
  earnings      Earning[]
  deposits      Deposit[]
  withdrawals   Withdrawal[]
  bankAccounts  BankAccount[]
  usdeTransactions USDETransaction[] // USDE transaction history
  ubos          UBO[]     // Ultimate Beneficial Owners
  kycReviews    KYCReview[] // KYC review history
  auditLogs     AuditLog[] // Admin audit logs
  
  // Enterprise relations
  enterpriseAsAdmin Enterprise? @relation("EnterpriseAdmin")
  enterpriseAsUser  Enterprise? @relation("EnterpriseUsers", fields: [enterpriseId], references: [id])
  
  // Treasury control relations
  userRoles     UserRole[] @relation("UserRoles")
  companyUserRoles UserRole[] @relation("CompanyUserRoles")
  treasurySettings TreasurySettings?
  approvalWorkflows ApprovalWorkflow[]
  approvals     Approval[]
}

model UBO {
  id              String   @id @default(cuid())
  companyId       String
  name            String
  idNumber        String   // ID/Passport number
  nationality     String
  address         String
  ownershipPercentage Float // Percentage of ownership
  addressProof    String?  // Address proof document
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id])
}

model KYCReview {
  id          String   @id @default(cuid())
  companyId   String
  reviewerId  String?  // Admin who reviewed
  status      String   // pending, approved, rejected, request_info
  notes       String?  // Review notes
  reviewedAt  DateTime @default(now())
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
}

model Payment {
  id          String   @id @default(cuid())
  fromId      String
  toId        String
  amount      Float
  lockDays    Int      // Lock-in days (30, 90, 180)
  status      String   @default("pending") // pending, released
  releaseAt   DateTime // Calculated release date
  releasedAt  DateTime?
  timestamp   DateTime @default(now())
  
  // Relations
  fromCompany Company  @relation("PaymentFrom", fields: [fromId], references: [id])
  toCompany   Company  @relation("PaymentTo", fields: [toId], references: [id])
}

model LockedBalance {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  releaseAt   DateTime
  sourceId    String   // Payment ID that created this lock
  createdAt   DateTime @default(now())
  
  // Relations
  user        Company  @relation(fields: [userId], references: [id])
}

model Stake {
  id          String   @id @default(cuid())
  companyId   String
  amount      Float
  startDate   DateTime @default(now())
  endDate     DateTime
  unlocked    Boolean  @default(false)
  unlockedAt  DateTime?
  interestRate Float   @default(0.04) // 4% annual rate
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  earnings    Earning[]
}

model Earning {
  id          String   @id @default(cuid())
  companyId   String
  amount      Float
  date        DateTime @default(now())
  strategy    String   // e.g., "us_treasury"
  stakeId     String?
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  stake       Stake?   @relation(fields: [stakeId], references: [id])
}

model Deposit {
  id          String   @id @default(cuid())
  companyId   String
  amount      Float
  stripePaymentId String?
  stripeSessionId String? // Stripe checkout session ID
  status      String   @default("pending") // pending, completed, failed
  timestamp   DateTime @default(now())
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
}

model Withdrawal {
  id          String   @id @default(cuid())
  companyId   String
  amount      Float
  bankAccountId String? // 银行账户ID
  status      String   @default("pending") // pending, processing, success, failed
  processedAt DateTime? // 处理完成时间
  burnTxHash  String? // 代币销毁交易哈希
  stripePayoutId String? // Stripe payout ID
  notes       String? // 失败原因或备注
  timestamp   DateTime @default(now())
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  bankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])
}

model BankAccount {
  id          String   @id @default(cuid())
  companyId   String
  bankName    String
  accountNum  String
  currency    String   @default("USD")
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  withdrawals Withdrawal[]
}

// USDE Transaction History
model USDETransaction {
  id          String   @id @default(cuid())
  companyId   String
  type        String   // mint, withdraw, transfer
  amount      Float
  balanceBefore Float
  balanceAfter  Float
  description String?
  metadata    String?  // JSON string for additional data
  timestamp   DateTime @default(now())
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
}

// Admin Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  adminId     String   // Admin who performed the action
  action      String   // kyc_approval, withdrawal_approval, user_management, etc.
  targetId    String?  // ID of the target (company, withdrawal, etc.)
  details     String?  // JSON string with action details
  ipAddress   String?  // IP address of the admin
  userAgent   String?  // User agent of the admin
  timestamp   DateTime @default(now())
  
  // Relations
  admin       Company  @relation(fields: [adminId], references: [id])
} 