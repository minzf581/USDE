#!/usr/bin/env python3
import psycopg2
import bcrypt
import uuid
from datetime import datetime
import os

# RailwayÊï∞ÊçÆÂ∫ìËøûÊé•ÈÖçÁΩÆ
RAILWAY_DB_URL = "postgresql://postgres:SOzxfxdDXTsVjKQJLTyeGHeKnxlQHQLR@yamabiko.proxy.rlwy.net:58370/railway"

def init_railway_database():
    """ÂàùÂßãÂåñRailwayÊï∞ÊçÆÂ∫ì"""
    print("üöÄ ÂºÄÂßãÂàùÂßãÂåñRailwayÊï∞ÊçÆÂ∫ì...")
    
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        conn = psycopg2.connect(RAILWAY_DB_URL)
        cursor = conn.cursor()
        
        print("‚úÖ ÊàêÂäüËøûÊé•Âà∞RailwayÊï∞ÊçÆÂ∫ì")
        
        # ÂàõÂª∫CompanyË°®
        print("üìä ÂàõÂª∫CompanyË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Company" (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                type TEXT DEFAULT 'company',
                role TEXT DEFAULT 'enterprise_user',
                status TEXT DEFAULT 'active',
                "kycStatus" TEXT DEFAULT 'pending',
                balance DOUBLE PRECISION DEFAULT 0,
                "usdeBalance" DOUBLE PRECISION DEFAULT 0,
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫EnterpriseË°®
        print("üìä ÂàõÂª∫EnterpriseË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Enterprise" (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                "adminId" TEXT UNIQUE NOT NULL,
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT "Enterprise_adminId_fkey" FOREIGN KEY ("adminId") REFERENCES "Company"(id)
            )
        """)
        
        # ÂàõÂª∫RoleË°®
        print("üìä ÂàõÂª∫RoleË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Role" (
                id TEXT PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫PermissionË°®
        print("üìä ÂàõÂª∫PermissionË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Permission" (
                id TEXT PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫UserRoleË°®
        print("üìä ÂàõÂª∫UserRoleË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "UserRole" (
                id TEXT PRIMARY KEY,
                "userId" TEXT NOT NULL,
                "roleId" TEXT NOT NULL,
                "companyId" TEXT,
                "assignedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫TreasurySettingsË°®
        print("üìä ÂàõÂª∫TreasurySettingsË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "TreasurySettings" (
                id TEXT PRIMARY KEY,
                "companyId" TEXT UNIQUE NOT NULL,
                "monthlyBudget" DOUBLE PRECISION DEFAULT 0,
                "quarterlyBudget" DOUBLE PRECISION DEFAULT 0,
                "approvalThreshold" DOUBLE PRECISION DEFAULT 1000,
                "autoApprovalEnabled" BOOLEAN DEFAULT false,
                "riskFlagThreshold" DOUBLE PRECISION DEFAULT 5000,
                "approvalWorkflow" TEXT DEFAULT 'single',
                "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫PaymentË°®
        print("üìä ÂàõÂª∫PaymentË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Payment" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                amount DOUBLE PRECISION NOT NULL,
                currency TEXT DEFAULT 'USD',
                status TEXT DEFAULT 'pending',
                type TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫StakeË°®
        print("üìä ÂàõÂª∫StakeË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Stake" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                amount DOUBLE PRECISION NOT NULL,
                apy DOUBLE PRECISION DEFAULT 0.05,
                status TEXT DEFAULT 'active',
                start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                end_date TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫DepositË°®
        print("üìä ÂàõÂª∫DepositË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Deposit" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                amount DOUBLE PRECISION NOT NULL,
                currency TEXT DEFAULT 'USD',
                status TEXT DEFAULT 'pending',
                stripe_payment_intent_id TEXT,
                usde_minted DOUBLE PRECISION DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫WithdrawalË°®
        print("üìä ÂàõÂª∫WithdrawalË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "Withdrawal" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                amount DOUBLE PRECISION NOT NULL,
                currency TEXT DEFAULT 'USD',
                status TEXT DEFAULT 'pending',
                bank_account_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫KYCË°®
        print("üìä ÂàõÂª∫KYCË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "KYC" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                documents TEXT,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ÂàõÂª∫BankAccountË°®
        print("üìä ÂàõÂª∫BankAccountË°®...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS "BankAccount" (
                id TEXT PRIMARY KEY,
                company_id TEXT NOT NULL,
                account_number TEXT NOT NULL,
                routing_number TEXT NOT NULL,
                bank_name TEXT NOT NULL,
                account_type TEXT DEFAULT 'checking',
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        print("‚úÖ ÊâÄÊúâË°®ÂàõÂª∫ÂÆåÊàê")
        
        # ÊèíÂÖ•Âü∫Á°ÄËßíËâ≤
        print("üìù ÊèíÂÖ•Âü∫Á°ÄËßíËâ≤...")
        cursor.execute("""
            INSERT INTO "Role" (id, name, description, "createdAt", "updatedAt") VALUES 
            ('role_admin', 'ADMIN', 'Administrator with full access', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
            ('role_enterprise_admin', 'ENTERPRISE_ADMIN', 'Enterprise administrator', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
            ('role_enterprise_user', 'ENTERPRISE_USER', 'Enterprise user', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
            ('role_supervisor', 'SUPERVISOR', 'Supervisor with approval access', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
            ('role_operator', 'OPERATOR', 'Operator with basic access', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
            ('role_observer', 'OBSERVER', 'Observer with read-only access', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT (id) DO NOTHING
        """)
        
        # ÂàõÂª∫ÁÆ°ÁêÜÂëòÁî®Êà∑
        print("üë§ ÂàõÂª∫ÁÆ°ÁêÜÂëòÁî®Êà∑...")
        admin_id = str(uuid.uuid4())
        admin_password_hash = bcrypt.hashpw('admin123'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        cursor.execute("""
            INSERT INTO "Company" (id, name, email, password, type, role, status, "kycStatus", balance, "usdeBalance", "createdAt", "updatedAt")
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT (email) DO NOTHING
        """, (
            admin_id,
            'System Administrator',
            'admin@usde.com',
            admin_password_hash,
            'enterprise',
            'admin',
            'active',
            'approved',
            0,
            0
        ))
        
        # ÂàõÂª∫demo‰ºÅ‰∏öÁî®Êà∑
        print("üë§ ÂàõÂª∫demo‰ºÅ‰∏öÁî®Êà∑...")
        demo_id = str(uuid.uuid4())
        demo_password_hash = bcrypt.hashpw('demo123'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        cursor.execute("""
            INSERT INTO "Company" (id, name, email, password, type, role, status, "kycStatus", balance, "usdeBalance", "createdAt", "updatedAt")
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT (email) DO NOTHING
        """, (
            demo_id,
            'Demo Company',
            'demo@usde.com',
            demo_password_hash,
            'enterprise',
            'enterprise_admin',
            'active',
            'approved',
            5000,
            10000
        ))
        
        # ÂàõÂª∫‰ºÅ‰∏öÂÆû‰Ωì
        print("üè¢ ÂàõÂª∫‰ºÅ‰∏öÂÆû‰Ωì...")
        cursor.execute("""
            INSERT INTO "Enterprise" (id, name, "adminId", "createdAt", "updatedAt")
            VALUES (%s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT (id) DO NOTHING
        """, (
            str(uuid.uuid4()),
            'Demo Enterprise',
            demo_id
        ))
        
        # ÂàõÂª∫TreasuryËÆæÁΩÆ
        print("üí∞ ÂàõÂª∫TreasuryËÆæÁΩÆ...")
        cursor.execute("""
            INSERT INTO "TreasurySettings" (id, "companyId", "monthlyBudget", "quarterlyBudget", "approvalThreshold", "autoApprovalEnabled", "riskFlagThreshold", "approvalWorkflow")
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (id) DO NOTHING
        """, (
            str(uuid.uuid4()),
            demo_id,
            1000000.0,
            3000000.0,
            10000.0,
            True,
            50000.0,
            'single'
        ))
        
        # Êèê‰∫§‰∫ãÂä°
        conn.commit()
        print("‚úÖ Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàêÔºÅ")
        
        # È™åËØÅÁî®Êà∑ÂàõÂª∫
        print("\nüîç È™åËØÅÁî®Êà∑ÂàõÂª∫...")
        cursor.execute('SELECT email, name, role, type, "kycStatus" FROM "Company" WHERE email IN (%s, %s)', ('admin@usde.com', 'demo@usde.com'))
        users = cursor.fetchall()
        
        for user in users:
            print(f"‚úÖ {user[1]} ({user[0]}) - Role: {user[2]}, Type: {user[3]}, KYC: {user[4]}")
        
    except Exception as e:
        print(f"‚ùå Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        if conn:
            conn.rollback()
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

if __name__ == "__main__":
    init_railway_database()
